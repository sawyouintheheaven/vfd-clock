C51 COMPILER V9.56.0.0   MYIICFORDS3231                                                    07/24/2019 14:16:20 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MYIICFORDS3231
OBJECT MODULE PLACED IN .\Objects\myiicForDs3231.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE myiicForDs3231.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\myiicForDs3231.lst) TABS(2) OBJECT(.\Objects\myiicForDs3231.obj)

line level    source

   1          #include "myiicForDs3231.h"
   2          #include <intrins.h>
   3          #include "ds3231.h"     //only for iic addr
   4          
   5          
   6          
   7          
   8          void mydelay_us(unsigned char n){
   9   1        unsigned char i;
  10   1        for (i=0;i<n;i++){
  11   2          _nop_();
  12   2          _nop_();
  13   2          _nop_();
  14   2          _nop_();  
  15   2        }
  16   1      }
  17          //void Delay50ms()    //@12.000MHz
  18          //{
  19          //  unsigned char i, j, k;
  20          
  21          //  _nop_();
  22          //  _nop_();
  23          //  i = 3;
  24          //  j = 72;
  25          //  k = 161;
  26          //  do
  27          //  {
  28          //    do
  29          //    {
  30          //      while (--k);
  31          //    } while (--j);
  32          //  } while (--i);
  33          //}
  34          //初始化IIC
  35          //void DS3231IIC_Init(void)
  36          //{              
  37          ////  GPIO_InitTypeDef GPIO_InitStructure;
  38          ////  RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE ); 
  39          ////  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);  //remapping pb4,3 from jtag to general gpio
  40          ////  
  41          ////  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;
  42          ////  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP ;   //推挽输出
  43          ////  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  44          ////  GPIO_Init(GPIOB, &GPIO_InitStructure);
  45          //// 
  46          ////  DS3231IIC_SCL=1;
  47          ////  DS3231IIC_SDA=1;
  48          ////  GPIO_ResetBits(GPIOB,GPIO_Pin_4);
  49          ////  delay_ms(100);
  50          ////  GPIO_SetBits(GPIOB,GPIO_Pin_4);
  51          //  
  52          //  DS3231IIC_SCL=1;
  53          //  DS3231IIC_SDA=1;
  54          //  DS3231RST=0;
C51 COMPILER V9.56.0.0   MYIICFORDS3231                                                    07/24/2019 14:16:20 PAGE 2   

  55          //  Delay50ms();
  56          //  DS3231RST=1;
  57          //}
  58          //产生IIC起始信号
  59          void DS3231IIC_Start(void)
  60          {
  61   1        //DS3231IIC_SDA_OUT();     //sda线输出
  62   1        DS3231IIC_SDA=1;        
  63   1        DS3231IIC_SCL=1;
  64   1        mydelay_us(4);
  65   1        DS3231IIC_SDA=0;//START:when CLK is high,DATA change form high to low 
  66   1        mydelay_us(4);
  67   1        DS3231IIC_SCL=0;//钳住I2C总线，准备发送或接收数据 
  68   1      }   
  69          //产生IIC停止信号
  70          void DS3231IIC_Stop(void)
  71          {
  72   1        //DS3231IIC_SDA_OUT();//sda线输出
  73   1        DS3231IIC_SCL=0;
  74   1        DS3231IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
  75   1        mydelay_us(4);
  76   1        DS3231IIC_SCL=1; 
  77   1        DS3231IIC_SDA=1;//发送I2C总线结束信号
  78   1        mydelay_us(4);                  
  79   1      }
  80          //等待应答信号到来
  81          //返回值：1，接收应答失败
  82          //        0，接收应答成功
  83          u8 DS3231IIC_Wait_Ack(void)
  84          {
  85   1        u8 ucErrTime=0;
  86   1        //DS3231IIC_SDA_IN();      //SDA设置为输入  
  87   1        DS3231IIC_SDA=1;mydelay_us(1);     
  88   1        DS3231IIC_SCL=1;mydelay_us(1);   
  89   1        while(DS3231IIC_SDA)
  90   1        {
  91   2          ucErrTime++;
  92   2          if(ucErrTime>250)
  93   2          {
  94   3            DS3231IIC_Stop();
  95   3            return 1;
  96   3          }
  97   2        }
  98   1        DS3231IIC_SCL=0;//时钟输出0      
  99   1        return 0;  
 100   1      } 
 101          //产生ACK应答
 102          void DS3231IIC_Ack(void)
 103          {
 104   1        DS3231IIC_SCL=0;
 105   1        //DS3231IIC_SDA_OUT();
 106   1        DS3231IIC_SDA=0;
 107   1        mydelay_us(2);
 108   1        DS3231IIC_SCL=1;
 109   1        mydelay_us(2);
 110   1        DS3231IIC_SCL=0;
 111   1      }
 112          //不产生ACK应答       
 113          void DS3231IIC_NAck(void)
 114          {
 115   1        DS3231IIC_SCL=0;
 116   1        //DS3231IIC_SDA_OUT();
C51 COMPILER V9.56.0.0   MYIICFORDS3231                                                    07/24/2019 14:16:20 PAGE 3   

 117   1        DS3231IIC_SDA=1;
 118   1        mydelay_us(2);
 119   1        DS3231IIC_SCL=1;
 120   1        mydelay_us(2);
 121   1        DS3231IIC_SCL=0;
 122   1      }                      
 123          //IIC发送一个字节
 124          //返回从机有无应答
 125          //1，有应答
 126          //0，无应答       
 127          void DS3231IIC_Send_Byte(u8 txd)
 128          {                        
 129   1          u8 t;   
 130   1        //DS3231IIC_SDA_OUT();      
 131   1          DS3231IIC_SCL=0;//拉低时钟开始数据传输
 132   1          for(t=0;t<8;t++)
 133   1          {              
 134   2              DS3231IIC_SDA=(txd&0x80)>>7;
 135   2              txd<<=1;    
 136   2          mydelay_us(2);   //对TEA5767这三个延时都是必须的
 137   2          DS3231IIC_SCL=1;
 138   2          mydelay_us(2); 
 139   2          DS3231IIC_SCL=0;  
 140   2          mydelay_us(2);
 141   2          }  
 142   1      }       
 143          //读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
 144          u8 DS3231IIC_Read_Byte(unsigned char ack)
 145          {
 146   1        unsigned char i,receive=0;
 147   1        //DS3231IIC_SDA_IN();//SDA设置为输入
 148   1          for(i=0;i<8;i++ )
 149   1        {
 150   2              DS3231IIC_SCL=0; 
 151   2              mydelay_us(2);
 152   2          DS3231IIC_SCL=1;
 153   2              receive<<=1;
 154   2              if(DS3231IIC_SDA)receive++;   
 155   2          mydelay_us(1); 
 156   2          }          
 157   1          if (!ack)
 158   1              DS3231IIC_NAck();//发送nACK
 159   1          else
 160   1              DS3231IIC_Ack(); //发送ACK   
 161   1          return receive;
 162   1      }
 163          void DS3231IIC_Write_One_Byte(u8 addr,u8 dat){
 164   1        DS3231IIC_Start();
 165   1        DS3231IIC_Send_Byte(DS3231_WriteAddress);
 166   1        DS3231IIC_Wait_Ack();
 167   1        DS3231IIC_Send_Byte(addr);
 168   1        DS3231IIC_Wait_Ack();
 169   1        DS3231IIC_Send_Byte(dat);
 170   1        DS3231IIC_Wait_Ack();
 171   1        DS3231IIC_Stop(); 
 172   1      }
 173          u8 DS3231IIC_Read_One_Byte(u8 addr){
 174   1          u8 tmp;
 175   1      
 176   1        DS3231IIC_Start();
 177   1        DS3231IIC_Send_Byte(DS3231_WriteAddress);
 178   1        DS3231IIC_Wait_Ack();
C51 COMPILER V9.56.0.0   MYIICFORDS3231                                                    07/24/2019 14:16:20 PAGE 4   

 179   1        DS3231IIC_Send_Byte(addr);
 180   1        DS3231IIC_Wait_Ack();
 181   1        
 182   1        DS3231IIC_Start();
 183   1        DS3231IIC_Send_Byte(DS3231_ReadAddress);
 184   1        DS3231IIC_Wait_Ack();
 185   1        tmp = DS3231IIC_Read_Byte(0);
 186   1        DS3231IIC_Stop(); 
 187   1        
 188   1        return tmp;
 189   1      }
 190          void DS3231IIC_BufferRead(u8 *buffer, u8 startAddr, u8 bufferLen)
 191          {   
 192   1        u8 t,add=startAddr;
 193   1        
 194   1        for(t=0;t<bufferLen;t++)
 195   1        {
 196   2            *buffer=DS3231IIC_Read_One_Byte(add++);
 197   2            buffer++;
 198   2        }
 199   1      }
 200          void DS3231IIC_ReverseDirBufferRead(u8 *buffer, u8 startAddr, u8 bufferLen)
 201          {   
 202   1        u8 t,add=startAddr;
 203   1        
 204   1        for(t=0;t<bufferLen;t++)
 205   1        {
 206   2            *buffer=DS3231IIC_Read_One_Byte(add--);
 207   2            buffer++;
 208   2        }
 209   1      }
 210          
 211          
 212          
 213          
 214          
 215          
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    404    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.56.0.0   MYIICFORDS3231                                                    07/24/2019 14:16:20 PAGE 5   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
